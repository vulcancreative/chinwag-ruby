{<img src="https://travis-ci.org/vulcancreative/chinwag-ruby.svg" alt="Build Status" />}[https://travis-ci.org/vulcancreative/chinwag-ruby]

= Chinwag Ruby

Much like its command-line counterpart, Chinwag Ruby exists as a text-synthesis tool, used for mocking up various textual elements. It the ideal companion to a Rails or Sinatra web application, where one needs to easily prototype space, while awaiting final copy. In this particular (Ruby) flavor of Chinwag, the forward-facing API is in Ruby, with the the underpinnings working seamlessly as a Ruby C extension.

Chinwag Ruby also contains a small library for converting compatible token files into an instance of the included dictionary class - CWDict. A valid CWDict is used for synthesis, allowing for proper randomization, organic sentence structure and syntax, and punctuation. Chinwag currently includes two embedded dictionaries - Seussian (the default) and Latin - where Seussian is based on the collective works of Theodor "Dr. Seuss" Geisel, and Latin is reminiscent of classic Lorem Ipsum output.

Chinwag supersedes existing Lorem Ipsum algorithms in its ability to naturally emulate sentences, in terms of punctuation, overall length, and word length. Furthermore, it excels in terms of speed and presence - generating thousands paragraphs with ease, and being available in numerous, multi-platform languages (as open-source software). It is also embedded in the popular, GUI-based design utility - Babble.

== Download and Installation

The latest version of Chinwag (for Ruby) can be installed with RubyGems:

  % [sudo] gem install chinwag

Or you can add this line to your Gemfile:
  
  gem 'chinwag'

...then run:

  % [sudo] bundle install

== Usage Sample

  #! /usr/bin/env/ ruby

  require 'chinwag'

  # acquire a built-in dictionary - seussian (default) or latin
  seuss = Chinwag::CWDict.open("seussian")

  # confirm dictionary loaded (optional)
  p seuss
  # => spills guts

  # confirm it is named (also optional)
  p seuss.name if seuss.named?
  # => "seussian"
  
  # generate 5 to 10 words if the dictionary is valid
  Chinwag::generate(seuss, :words, 5) if seuss.valid?
  # => "Found Speckhah Opener Kangaroo Oh Frightening Thankful"
  
  # generate 1 sentence if the dictionary is valid
  Chinwag::generate(seuss, :sentences, 1) if seuss.valid?
  # => "Guaranteed smack, Mordecai Ali Van Allen O'Shea frequently humpfed!"

== Rudimentary Instruction

In order to generate text (using the appropriately named 'generate' method), one must first prepare a dictionary. One can create a dictionary using a token file (and then test it for validity), or by using one of Chinwag's built-in options - Seussian or Latin (see above for more info).

To spin up a dictionary from a token file, one simply needs to pass in the file location (as a Ruby File object), and then check it for validity before running. If the dictionary contains less than 300 valid tokens ("words" without spaces), or cannot be sorted by token length, a generic Exception will be thrown:

  require 'chinwag'

  # get the token File instance, in relation to the pwd
  dir = File.dirname(__FILE__)
  file_name = "gangsta"
  file = File.open(File.join(dir, "dicts", file_name))

  # synthesize a CWDict from the tokens
  dict = Chinwag::CWDict.open(file)

  # one should now check that they have a valid dictionary (optional)
  dict.validate!
  # => will raise Exception if invalid
  
  # the CWDict will have the name of the provided file, minus any extension
  p dict.name
  # => "gangsta"

  # the file can then be closed, as it's no longer needed
  file.close

CWDict instances can also be loaded from the provided token dictionaries, Seussian and Latin, with ease:

  # ...

  seuss = Chinwag::CWDict.open "seussian"
  latin = Chinwag::CWDict.open "latin"

A third option is to dynamically create a CWDict via collection-like concatentation with String instances or String Arrays:

  # ...
  
  # open a blank, invalid dictionary
  blank = Chinwag::CWDict.open

  # add some strings and test for validity
  blank += "abc"
  blank += %w[def ghi kjl mno pqr stu]

  blank.validate! # optional
  # => will throw Exception... too short
  
  # make valid by bringing up to at least 300 unique, spaceless tokens
  for i in 0..500 do
    blank << "a" * i
  end

  # confirm validity (also optional)
  blank.validate!
  # => shouldn't throw an Exception

With a valid CWDict, one can easily generate text, using the like-named method - generate. The generate method takes a couple optional arguments, with one of four output types, in the form of a Symbol - :letters, :words, :sentences, or :paragraphs. The generator outputs 1 to 5 words using the Seussian dictionary byt default:

  # ...

  # will output 1 to 5 words in Seussian
  Chinwag::generate
  # => "Lit Be You'll Creature"

  # will output 1 to 5 words in Latin
  Chinwag::generate(latin)
  # => "Degusto Caelatura"
  
  # will output 1 sentence in latin
  Chinwag::generate(latin, :sentences, 1)
  # => "Condenso tingo advivo, contans calciamentarius tertiana scammonea?"

  # will output 10 to 40 letters in Seussian
  Chinwag::generate(seuss, :letters, 10, 40)
  # => "Fox Dibble Loose Congratulations"

The alternative to using the supplied arguments is to set the defaults yourself, and then utilize the method cleanly:

  # ...
  
  Chinwag::generate
  # => "Lasso Hot Shake Whatever Away"
  
  Chinwag::set_default_dict latin
  # => returns previous default_dict (initially Seussian)

  Chinwag::set_default_type :letters
  # => returns previous default_type value (initially :words)

  Chinwag::set_default_min_output 20
  # => returns previous default_min_output (initially 1)

  Chinwag::set_default_max_output 40
  # => returns previous default_max_output (initially 5)

  Chinwag::generate
  # => "Subvectus Colimbus Lagoena Io"

  # further clean-up the code by including Chinwag...
  include Chinwag

  # ...and then no module name is required for generation
  generate
  # => "Indusium Mi Succidia"

== License

Chinwag, and its various language flavors, are released under the MIT license:

  http://www.opensource.org/licenses/MIT

== Contributing

Currently looking for help with i18n. If you have experience working with cross-platform Unicode strings in C, you are encouraged to contribute.
